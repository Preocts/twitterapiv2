"""
Authenticate using OAuth1 for user

Creating signature:
https://developer.twitter.com/en/docs/authentication/oauth-1-0a/creating-a-signature

Building header string:
https://developer.twitter.com/en/docs/authentication/oauth-1-0a/authorizing-a-request

3-step Auth process:
https://developer.twitter.com/en/docs/authentication/oauth-1-0a/obtaining-user-access-tokens
https://developer.twitter.com/en/docs/authentication/api-reference/request_token
"""
from __future__ import annotations

import base64
import hmac
import logging
import os
from datetime import datetime
from hashlib import sha1
from secrets import token_urlsafe
from urllib import parse

from twitterapiv2.http_client import HTTPClient
from twitterapiv2.model.useroauthresponse import UserOAuthResponse

BASE_URL = "https://api.twitter.com"
USER_AUTH_PROMPT = "Click on link, accept, and enter the resulting PIN to authenticate:"


class UserTUIAuthClient:
    """Creates and manages 3-legged user authentication via TUI"""

    def __init__(self) -> None:
        """Creates and manages 3-legged user authentication via TUI"""
        self.log = logging.getLogger(__name__)
        self.http = HTTPClient()
        self.callback_http = "oob"
        self._user_auth: UserOAuthResponse | None = None

    def generate_oauth_header(self, header_values: dict[str, str]) -> dict[str, str]:
        """
        Generated OAuth header string

        Args
            header_values: key:value pairs of all headers

        Returns
            dict : {"Authorization": "formated key:values"}

        Raises
            None
        """
        segments: list[str] = []
        for key, value in header_values.items():
            qkey = parse.quote(key, safe="")
            qvalue = parse.quote(value, safe="")
            segments.append(f'{qkey}="{qvalue}"')
        return {"Authorization": "OAuth " + ", ".join(segments)}

    def generate_oauth_keys(self) -> dict[str, str]:
        """
        Collect all key:values needed for headers excluding `oauth_signature`

        Requires `TW_CONSUMER_KEY` and `TW_ACCESS_TOKEN` to be set in
        environment variables. Will raise if missing.

        Args
            None

        Returns
            dict[str, str]

        Raises
            KeyError: on missing environment varialbes
        """
        consumer_key = os.getenv("TW_CONSUMER_KEY", None)
        access_token = os.getenv("TW_ACCESS_TOKEN", None)
        if consumer_key is None or access_token is None:
            raise KeyError("Missing consumer/access environment variable(s).")

        keys = {
            "oauth_consumer_key": consumer_key,
            "oauth_nonce": token_urlsafe(),
            "oauth_signature_method": "HMAC-SHA1",
            "oauth_timestamp": f"{int(datetime.utcnow().timestamp())}",
            "oauth_token": access_token,
            "oauth_version": "1.0",
        }
        return keys

    def generate_parameter_string(
        self,
        oauth_keys: dict[str, str],
        fields: dict[str, str] | None = None,
    ) -> str:
        """
        Generate OAuth1 parameter string

        Args
            oauth_keys: generated by self.generate_oauth_keys()
            header: key:value pairs of all headers being used

        Returns
            str: a parameter string in OAuth1 format

        Raises
            None
        """
        fields = fields if fields is not None else {}
        joined_fields = {**fields, **oauth_keys}
        parameter_segments: list[str] = []
        for field in sorted(joined_fields):
            key = parse.quote(field, safe="")
            value = parse.quote(joined_fields[field], safe="")
            parameter_segments.append(f"{key}={value}")
        return "&".join(parameter_segments)

    def generate_base_string(
        self,
        method: str,
        route: str,
        parameter_string: str,
    ) -> str:
        """
        Generate OAuth1 base string

        Args
            method: HTTP method used for call (GET, POST, etc)
            route: API route from BASE_URL. Must start with `/`
            parameter_string: generated from self.generate_parameter_string()

        Returns
            str: OAuth1 base string

        Raises
            None
        """
        base_string = f"{method.upper()}&"
        base_string += parse.quote(f"{BASE_URL}{route}", safe="") + "&"
        base_string += parse.quote(parameter_string, safe="")
        return base_string

    def generate_signature_string(self, base_string: str) -> str:
        """
        Generate OAuth1 sha1 signature

        Requires `TW_CONSUMER_SECRET` and `TW_ACCESS_SECRET` to
        be set in environment variables.

        TODO: (preocts) There is a way to not need access secret?

        Args
            base_string: generated from self.generate_base_string()

        Returns
            str: utf-8 encoded sha1 signature string

        Raises
            KeyError: on missing environment variables
        """
        consumer_secret = os.getenv("TW_CONSUMER_SECRET", None)
        access_secret = os.getenv("TW_ACCESS_SECRET", None)
        if consumer_secret is None or access_secret is None:
            raise KeyError("Missing consumer/access environment variable(s).")
        base_bytes = base_string.encode("utf-8")
        combined = (
            parse.quote(consumer_secret, safe="")
            + "&"
            + parse.quote(access_secret, safe="")
        ).encode("utf-8")
        hash_bytes = hmac.new(combined, base_bytes, sha1).digest()
        return base64.encodebytes(hash_bytes).decode("utf-8").rstrip("\n")

    def authenticate(self) -> bool:
        """
        Authenticates as a user via TUI. Requires console I/O.

        Handles the request process from start to conclusion.
            1. Direct user to visit URL and accept access request
            2. Prompt user to enter PIN after accepting access request
            3. Fetch OAuth tokens for further requets

        NOTE: Access tokens are not intended to be stored and must
        be renewed for each use.

        Args
            None

        Returns
            bool: status of authentication request

        Raises
            None
        """
        user_resp = self.request_user_permission()
        if user_resp is None:
            return False
        print(USER_AUTH_PROMPT)
        print(
            "https://api.twitter.com/oauth/authorize"
            f"?oauth_token={user_resp.oauth_token}"
        )

        pin = input("Enter authentication PIN: ")

        self._user_auth = self.validate_authentication(user_resp.oauth_token, pin)

        return bool(self._user_auth)

    def request_user_permission(self) -> UserOAuthResponse | None:
        """
        Request user permission to access their account

        Args
            None

        Returns
            UserOAuthResponse | None: response values for next step

        Raises
            None
        """
        oauth_keys = self.generate_oauth_keys()
        fields = {"oauth_callback": self.callback_http}
        param = self.generate_parameter_string(oauth_keys, fields)
        base = self.generate_base_string("POST", "/oauth/request_token", param)
        oauth_keys["oauth_signature"] = self.generate_signature_string(base)
        url = f"{BASE_URL}/oauth/request_token?oauth_callback="
        url += parse.quote(self.callback_http)

        result = self.http.http.request(
            method="POST",
            url=url,
            headers=self.generate_oauth_header(oauth_keys),
        )
        try:
            return UserOAuthResponse.from_resp_string(result.data.decode("utf-8"))
        except ValueError:
            self.log.error("Authentication failed: '%s'", result.data)
            return None

    def validate_authentication(
        self,
        oauth_token: str,
        verifier: str,
    ) -> UserOAuthResponse | None:
        """
        Converts user response token and PIN to useable access tokens

        Requires `TW_CONSUMER_KEY` to be set in environment
        variables or will raise.

        Args
            oauth_token: token from user permission step
            verifier: PIN from user input

        Returns
            UserOAuthResponse | None: User access response values

        Raises
            None
        """
        fields = {"oauth_token": oauth_token, "oauth_verifier": verifier}
        result = self.http.http.request_encode_url(
            method="POST",
            url=f"{BASE_URL}/oauth/access_token",
            fields=fields,
        )
        try:
            return UserOAuthResponse.from_resp_string(result.data.decode("utf-8"))
        except ValueError:
            self.log.error("Authentication failed: '%s'", result.data)
            return None


if __name__ == "__main__":
    from secretbox import SecretBox

    logging.basicConfig(level="DEBUG")
    box = SecretBox(auto_load=True)
    client = UserTUIAuthClient()
    client.authenticate()
    print(client._user_auth)
